AULA 2.7

NomeDaClasseController -> Classe responsavel por receber requisicoes web.
@ResponseBody -> Anotacao que indica que o retorno do endpoint seja no corpo da requisicao.

AULA 2.9

Injetando um notificar na instanciacao de AtivacaoClienteService, isso
eh uma injecao de dependencias de forma manual.
=======================================================================
Injecao de dependencias eh uma forma de inversao de controle onde se eh
injetado uma determinada dependencia em uma classe.
=======================================================================
Injecao de dependencias possui baixo aclopamento

exemplo: Notificador notificadorEmail = new NotificadorEmail();

AULA 2.11

@SpringBootApplication -> essa anotacao eh responsavel para que o Spring IoC Container
mapeie as classes do projeto e encontre as outras anotacoes e realize uma instancia.

@Component -> essa anotacao eh para o spring gerencie essa classe,
ou seja, o container do spring encontre a classe no projeto realize
a instancia, configuracao e a injecao de objetos dessa classe em
outros beans.

O construtor da classe eh chamado mesmo sem ter sido instanciado
em nenhuma outra classe, por que na inicializacao da aplicacao (bootstrap)
o Spring IoC Container mapeia todas as classes do projeto encontrou um componente
atraves da anotacao e realizou uma instancia da classe.

public NotificadorEmail() {
    System.out.println("Construtor chamado!");
}

AULA 2.12

Injecao de Dependencias atraves do construtor
por que o objeto NotificadorEmail eh um componente spring

exemplo: 
public NomeDaClasse(NomeDaClasse variavel) {
	this.atributo = variavel;
}

AULA 2.13

@Configuration -> anotacao que define uma classe de configuracoes
@Bean -> anotacao que indica que esse metodo realiza a instancia, configuracao e inicializa
um novo objeto que sera gerenciado pelo container spring.
Dentro do Spring IoC Container, por padrao o bean sera nomeado como "notificadorEmail",
que eh exatamente o nome do metodo de definicao do bean. 

